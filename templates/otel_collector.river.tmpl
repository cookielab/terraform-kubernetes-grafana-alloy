declare "otel_collector" {

  argument "traces_output" {
    optional = false
    comment = "Where to send OTel traces"
  }

  argument "metrics_output" {
    optional = false
    comment  = "Where to send Prometheus metrics"
  }

  otelcol.receiver.otlp "default" {
    http {
      endpoint = "0.0.0.0:${otel_http_port}"
    }
    grpc {
      endpoint = "0.0.0.0:${otel_grpc_port}"
    }

    output {
      traces = [otelcol.processor.attributes.default.input]
      metrics = [otelcol.processor.attributes.default.input]
    }
  }

  otelcol.processor.attributes "default" {
    action {
      action = "upsert"
      key    = "k8s.cluster.name"
      value  = sys.env("GRAFANA_AGENT_K8S_CLUSTER")
    }

    output {
      traces = [otelcol.processor.k8sattributes.default.input]
      metrics = [otelcol.processor.k8sattributes.default.input]
    }
  }

  otelcol.processor.k8sattributes "default" {
    pod_association {
      source {
        from = "connection"
      }
      source {
        from = "resource_attribute"
        name = "k8s.pod.ip"
      }
      source {
        from = "resource_attribute"
        name = "k8s.pod.uid"
      }
    }

    extract {
      label {
        from      = "pod"
        key_regex = "app.kubernetes.io/(.*)"
        tag_name  = "k8s.app.$1"
      }

      annotation {
        from      = "pod"
        key_regex = "app.gitlab.com/(.*)"
        tag_name  = "k8s.gl.$1"
      }

      metadata = [
        "k8s.namespace.name",
        "k8s.node.name",
        "k8s.pod.name",
        "k8s.pod.start_time",
        "k8s.pod.uid",
      ]
    }

    output {
      traces = [
        otelcol.connector.servicegraph.default.input,
        otelcol.connector.spanmetrics.default.input,
        otelcol.processor.batch.default.input,
      ]
      metrics = [otelcol.processor.batch.default.input]
    }
  }

  otelcol.connector.servicegraph "default" {
    dimensions = [
    %{ for dim in otel_service_graphs_dimensions ~}
    "${dim}",
    %{ endfor ~}
  ]

    output {
      metrics = [otelcol.processor.batch.default.input]
    }
  }

  otelcol.connector.spanmetrics "default" {
    histogram {
      exponential {}
    }

    output {
      metrics = [otelcol.processor.batch.default.input]
    }
  }

  // Batch processor

  otelcol.processor.batch "default" {
    output {
      traces  = [otelcol.exporter.otlphttp.tempo.input]
      metrics = [otelcol.exporter.prometheus.mimir.input]
    }
  }

  // Tempo exporter

  otelcol.exporter.otlphttp "tempo" {
    client {
      endpoint = argument.traces_output.value
    }
  }

  // Mimir exporter

  otelcol.exporter.prometheus "mimir" {
    forward_to = [argument.metrics_output.value]
  }
}
